// Generated by dts-bundle-generator v4.3.0

import dayjs from 'dayjs';

declare class TsGanttTask {
	readonly uuid: string;
	readonly parentUuid: string;
	readonly externalId: string;
	readonly parentExternalId: string;
	readonly nestingLvl: number;
	readonly hasChildren: boolean;
	readonly name: string;
	readonly localizedNames: {
		[key: string]: string;
	};
	readonly datePlannedStart: dayjs.Dayjs;
	readonly datePlannedEnd: dayjs.Dayjs;
	readonly dateActualStart: dayjs.Dayjs;
	readonly dateActualEnd: dayjs.Dayjs;
	readonly progress: number;
	shown: boolean;
	expanded: boolean;
	constructor(id: string, parentId: string, name: string, localizedNames: {
		[key: string]: string;
	}, progress: number, datePlannedStart?: Date, datePlannedEnd?: Date, dateActualStart?: Date, dateActualEnd?: Date, nestingLvl?: number, hasChildren?: boolean, parentUuid?: string, uuid?: string);
	static convertModelsToTasks(taskModels: TsGanttTaskModel[]): TsGanttTask[];
	static detectTaskChanges(data: TsGanttTaskUpdateResult): TsGanttTaskChangeResult;
	static checkPaternity(tasks: TsGanttTask[], parent: TsGanttTask, child: TsGanttTask): boolean;
	static checkForCollapsedParent(tasks: TsGanttTask[], task: TsGanttTask): boolean;
	static sortTasksRecursively(tasks: TsGanttTask[], parentUuid: string): TsGanttTask[];
	equals(another: TsGanttTask): boolean;
	compareTo(another: TsGanttTask): number;
	getState(): "not-started" | "in-progress" | "overdue" | "completed" | "completed-late";
	convertToModel(): TsGanttTaskModel;
}
export interface TsGanttTaskModel {
	id: string;
	parentId: string;
	name: string;
	progress: number;
	datePlannedStart: Date;
	datePlannedEnd: Date;
	dateActualStart: Date;
	dateActualEnd: Date;
	localizedNames: {
		[key: string]: string;
	};
}
export interface TsGanttTaskUpdateResult {
	oldTasks: TsGanttTask[];
	newTasks: TsGanttTask[];
}
export interface TsGanttTaskChangeResult {
	added: TsGanttTask[];
	deleted: TsGanttTask[];
	changed: TsGanttTask[];
	all: TsGanttTask[];
}
export declare class TsGanttOptions {
	multilineSelection: boolean;
	useCtrlKeyForMultilineSelection: boolean;
	drawTodayLine: boolean;
	highlightRowsDependingOnTaskState: boolean;
	columnsMinWidthPx: number[];
	columnsContentAlign: ("start" | "center" | "end")[];
	separatorWidthPx: number;
	headerHeightPx: number;
	rowHeightPx: number;
	borderWidthPx: number;
	barStrokeWidthPx: number;
	barMarginPx: number;
	barCornerRadiusPx: number;
	rowSymbols: TsGanttRowSymbols;
	chartShowProgress: boolean;
	chartDisplayMode: "planned" | "actual" | "both";
	chartScale: "day" | "week" | "month" | "year";
	chartDateOffsetDays: {
		[key: string]: number;
	};
	chartDateOffsetDaysMin: {
		[key: string]: number;
	};
	chartDayWidthPx: {
		[key: string]: number;
	};
	locale: string;
	localeDecimalSeparator: {
		[key: string]: string;
	};
	localeDateFormat: {
		[key: string]: string;
	};
	localeFirstWeekDay: {
		[key: string]: number;
	};
	localeDateMonths: {
		[key: string]: string[];
	};
	localeDateDays: {
		[key: string]: string[];
	};
	localeDateDaysShort: {
		[key: string]: string[];
	};
	localeDateScale: {
		[key: string]: string[];
	};
	localeFooters: {
		[key: string]: string[];
	};
	localeHeaders: {
		[key: string]: string[];
	};
	localeDurationFormatters: {
		[key: string]: (duration: number) => string;
	};
	columnValueGetters: ((a: TsGanttTask) => string)[];
	constructor(item?: object);
}
export interface TsGanttRowSymbols {
	expanded: string;
	collapsed: string;
	childless: string;
}
export declare class TsGantt {
	private _options;
	private _tasks;
	get tasks(): TsGanttTaskModel[];
	set tasks(models: TsGanttTaskModel[]);
	private _selectedTasks;
	get selectedTasks(): TsGanttTaskModel[];
	set selectedTasks(models: TsGanttTaskModel[]);
	private _htmlContainer;
	private _htmlWrapper;
	private _htmlTableWrapper;
	private _htmlChartWrapper;
	private _htmlSeparator;
	private _htmlSeparatorDragActive;
	private _table;
	private _chart;
	private _ignoreNextScrollEvent;
	set locale(value: string);
	set chartScale(value: "day" | "week" | "month" | "year");
	set chartDisplayMode(value: "planned" | "actual" | "both");
	constructor(containerSelector: string, options: TsGanttOptions);
	destroy(): void;
	expandAll(state: boolean): void;
	onResize: (e: Event) => void;
	onMouseDownOnPartsSeparator: (e: MouseEvent | TouchEvent) => void;
	onMouseMoveWhileResizingParts: (e: MouseEvent | TouchEvent) => boolean;
	onMouseUpWhileResizingParts: (e: MouseEvent | TouchEvent) => void;
	onWrapperScroll: EventListener;
	onRowClick: EventListener;
	onRowExpanderClick: EventListener;
	private removeWindowEventListeners;
	private removeDocumentEventListeners;
	private setCssVariables;
	private createLayout;
	private updateTasks;
	private toggleTaskExpanded;
	private changeSelection;
	private selectTasks;
	private refreshSelection;
	private scrollChartToTasks;
	private update;
	private updateLocale;
	private updateChartScale;
	private updateChartDisplayMode;
	private getShownUuidsRecursively;
}

export {};
