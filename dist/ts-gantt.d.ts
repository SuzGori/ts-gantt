// Generated by dts-bundle-generator v4.0.0

export declare class TsGanttTaskModel {
	id: string;
	parentId: string | null;
	name: string;
	progress: number;
	datePlannedStart: Date;
	datePlannedEnd: Date;
	dateActualStart: Date | null;
	dateActualEnd: Date | null;
	constructor(id: string, parentId: string | null, name: string, progress: number, datePlannedStart: Date, datePlannedEnd: Date, dateActualStart?: Date | null, dateActualEnd?: Date | null);
}
export declare class TsGanttTask {
	readonly externalId: string;
	readonly uuid: string;
	parentExternalId: string;
	parentUuid: string;
	nestingLvl: number;
	name: string;
	datePlannedStart: Date;
	datePlannedEnd: Date;
	dateActualStart: Date | null;
	dateActualEnd: Date | null;
	durationPlanned: number;
	durationActual: number;
	private _progress;
	set progress(value: number);
	get progress(): number;
	constructor(id: string, parentId: string, name: string, progress: number, datePlannedStart: Date, datePlannedEnd: Date, dateActualStart?: Date | null, dateActualEnd?: Date | null, nestingLvl?: number, parentUuid?: string, uuid?: string);
	static convertModelsToTasks(taskModels: TsGanttTaskModel[], idsMap?: Map<string, string>): TsGanttTask[];
	static convertTasksToModels(tasks: TsGanttTask[]): TsGanttTaskModel[];
	static detectTaskChanges(data: TsGanttTaskUpdateResult): TsGanttTaskChangesDetectionResult;
	static getTasksIdsMap(tasks: TsGanttTask[]): Map<string, string>;
	refreshDuration(): void;
	equals(another: TsGanttTask): boolean;
}
export declare class TsGanttTaskUpdateResult {
	oldTasks: TsGanttTask[];
	newTasks: TsGanttTask[];
}
export declare class TsGanttTaskChangesDetectionResult {
	added: TsGanttTask[];
	deleted: TsGanttTask[];
	changed: TsGanttTask[];
	unchanged: TsGanttTask[];
}
export declare class TsGanttOptions {
	headerHeight: number;
	rowHeight: number;
	columnWidth: number;
	scale: "hour" | "day" | "week" | "month";
	locale: "ru" | "en" | "uk";
	customDateFormat: string;
	allowMoveBars: boolean;
	allowResizeBars: boolean;
	allowMoveProgress: boolean;
	constructor(item?: object);
	barHeaderGetter: (a: TsGanttTask) => string;
	tooltipHeaderGetter: (a: TsGanttTask) => string;
	tooltipPlannedPeriodGetter: (a: TsGanttTask) => string;
	tooltipActualPeriodGetter: (a: TsGanttTask) => string;
	tooltipPlannedDurationGetter: (a: TsGanttTask) => number;
	tooltipActualDurationGetter: (a: TsGanttTask) => number;
	tooltipProgressGetter: (a: TsGanttTask) => number;
}
export declare class TsGanttChart {
	private _chartColumns;
	private _chartRows;
	private _htmlSvg;
	get htmlSvg(): SVGElement;
	constructor(classList: string[]);
}
export declare class TsGanttTable {
	private readonly _minWidth;
	private _htmlTable;
	get htmlTable(): HTMLTableElement;
	private _tableColumns;
	private _tableRows;
	constructor(classList: string[], minWidth: number);
	setWidth(width: number): void;
}
export declare class TsGantt {
	private static readonly WRAPPER_CLASS;
	private static readonly TABLE_CLASS;
	private static readonly CHART_CLASS;
	private static readonly SEPARATOR_CLASS;
	private static readonly TABLE_MIN_WIDTH;
	private _options;
	private _tasks;
	get tasks(): TsGanttTaskModel[];
	set tasks(taskModels: TsGanttTaskModel[]);
	private _htmlContainer;
	private _htmlWrapper;
	private _htmlSeparator;
	private _htmlSeparatorDragActive;
	private _table;
	private _chart;
	constructor(containerSelector: string, options: TsGanttOptions);
	destroy(): void;
	createLayout(): void;
	updateTasks(taskModels: TsGanttTaskModel[]): TsGanttTaskUpdateResult;
	updateRows(data: TsGanttTaskChangesDetectionResult): void;
	onMouseDownOnSep: (e: MouseEvent) => void;
	onMouseMoveOnSep: (e: MouseEvent) => boolean;
	onMouseUpOnSep: (e: MouseEvent) => void;
}

export {};
